
what is included:
    - API documentation using Apiary, it also provides mock server
    - API database setup is done using sql migrations
    - API server written in Golang, powered by sqlite
    - Tests
    - Helper scripts to build, run and test locally
    - Dockerfile to build docker image
    - Docker Compose configuration to perform deployment
    - CircleCI configuration to handle continuous integration.
    on code push to `master` branch, CircleCI will fetch, build, test, build docker image and publish new
    docker image to docker hub as well.


why go-restful?
    - it comes with good set of helper functions and features.
    Its really easy to keep adding features to this api, add more control,
    support CORS may be. Its all included in go-restful

    - it can also read request directly in our entity structure type and cries out if there's an error. didn't have many use cases
    in this api to fully utilize many features of go-restful

    - it helps cleaner and modular organization of code. e.g. controller is only registering handlers that are only related to that
    particular resource
    - methods.go contain functions that take care of handling the requests

    - easier versioning of api
    if I have to add v2 of api then I only have to copy v1 to v2, then updated path prefix in `apiv2.go` to something like
    `/v2/messages` and it's done.
    `apiv1.go` only serves the purpose of keeping it simple. It only adds the given `ws` with correctly versioned prefix.
    Hence, if we have like 50 endpoints in v1 already then, when we copy v1 to v2, we don't have to update Path at 50 places to add
    version prefix. We could only update `apiv2.go` with 2 lines

        // helper function to prefix version path and add WebService in parent container
        func AddWebService(ws *restful.WebService) {
            root := ws.RootPath()
            ws.Path("/v2/" + root) // <--- this
            api.AddWebService(ws)
        }

    - other option I had to simplify routing was gorilla mux
    it is good as well but its sort of limiting. It doesn't have much of helper functions as much as go-restful provides

    - Not Implemented but go-restful also supports swagger. swagger helps a lot while playing with the API,
    its like Postman tool + much more. We can document it right in code and swagger picks it up.
    swagger also figures out struct types (if we are taking them as input). It requires very little setup to do and I'll
    add it if you just want to check it out.

request and payload validation
    - go-restful also lets me validate url path parameters using regex.
    so `/messages/12345-$%^&-qwer` will result in 404 at controller level. Since we know our ids will never have those
    characters in it, this saves us from querying the db and then finding out that it doesn't exist

    - in `api/messages/methods.go` I validate if parameter is supplied or not. It's not highly intelligent. that is because
    my controller doesn't have to know anything about special requirements of data my model might have.
    for example: if it were a number parameter, controller should only check that whether there is a number provided.
    If Model requires that number to be between, say, 30-60 then model's validation function will check that.
    To demonstrate this difference, I have kept `strings.TrimSpace` call in Create() as "special requirement" of my model


about database:
    - I chose sqlite because, well, simple and serves the purpose of this assignment. Otherwise I have always been a postgres user
    - we also have migrations in place using https://github.com/mattes/migrate
    - better way of versioning our database schema
    - I don't have experience with this particular tool. I have used south, flywayDB and pg-migrate before
    - reason for picking this particular one is because its in golang, works fine and other tools weren't suitable picks since
    south is in python world, flywayDB requires java to run - that adds another dependency and pg-migrate requires migrations written
    in javascript

    - I am also using `github.com/jmoiron/sqlx` instead of standard sql package. sqlx adds number of handy extensions and code looks
    simpler, shorter by considerable margin.
    - it provides functions for directly reading row into struct type, reading many rows into slice of struct,
    better parameterized queries. Takes care of connection pool internally.

why UUID as message identifier instead of their numeric IDs?
    - this is really just for the sake of my opinion. I did not want to expose IDs of the messages that are in the db.
    It really doesn't matter right now, but if it _could_ matter, I prefer having random IDs that users can't guess.
    - Apart from exposing our primary keys, it is also possible to just iterate over sequential IDs and get whole dump
    of database on remote end. Unique ids just help preventing that.
    - Note that uuid column is not my primary key. We do have numeric Id column as a primary key in the db for our use
    which can be used for other reference purposes
    - I am aware that my use of uuid as a string adds overhead. strings are evil for lookup. even though we have index
    on strings, its insertion cost is higher than that of autonumber column
    - however, it is to be decided over the tradeoff and what is on priority, is it performance or other factors

about models:
    - I like this pattern that I learned with django framework. Everything about that model and it's data is at one place.
    - It is responsible to do the database interaction to insert, select operations on its own as well
    - If there's anything related to how data is managed w.r.t Message entity, I know exactly where to look at!

apiary for documentation
    - its a simple markdown like format we can use to describe our API
    - best part is mock server that it provides
    - we can do this once docs are up and it will send back correct mock response!
        `$ curl http://private-6513d-messages19.apiary-mock.com/messages/ -d text=heyho`
    - frontend developer doesn't have to wait until backend developer actually puts up the API!

circleci for continuous integration
    - https://circleci.com/gh/Omie/messages




